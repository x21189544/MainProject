<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Web3 IT Asset Management Update Asset</title>
    <script
      type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"
    ></script>
  </head>

  <body style="background-color: burlywood">
    <!-- include header partials -->
    <%- include('partials/header') %>

    <h1 class="text-center">
      Welcome to the Web3 IT Asset Management Update Page
    </h1>

    <!-- Get Asset Details-->
    <div class="container">
      <h2>Update Asset Details</h2>

      <!-- Spinner -->
      <%- include('partials/spinner') %>

      <!-- Display asset does not exist Alert -->
      <%- include('partials/assetDoesNotExistArea') %> 

      <!-- Display Asset Updated Alert -->
      <%- include('partials/statusArea') %>

      <!-- Get Details -->
      <!-- serialGet Partial -->
      <%- include('partials/serialGet') %>

      <button onclick="populateAssetDetails()" class="btn btn-primary">
        Get Current Asset Details
      </button>
    </div>

    <!-- Update Asset -->
    <div id="formArea" class="container d-none">
      <h2>Input Updated Asset Details</h2>
      
      <!-- Asset Form partials-->
      <%- include('partials/assetForm') %>
  
      <button onclick="updateAsset()" type="submit" class="btn btn-primary">
        Update Asset
      </button>
    </div>

    <!-- include header partials -->
    <%- include('partials/footer') %>

    <script>
      // the below script code is convention in web3 in forming the communication with Web
      let account;
      const connectMetamask = async () => {
        if (window.ethereum !== "undefined") {
          const accounts = await ethereum.request({
            method: "eth_requestAccounts",
          });
          account = accounts[0];
          document.getElementById(
            "userArea"
          ).innerHTML = `User Account: ${account}`;
        }

        //contract ABI
        const ABI = [
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address",
              },
              {
                indexed: false,
                internalType: "string",
                name: "serialNumber",
                type: "string",
              },
            ],
            name: "AssetRegistered",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: false,
                internalType: "string",
                name: "serialNumber",
                type: "string",
              },
              {
                indexed: false,
                internalType: "address",
                name: "from",
                type: "address",
              },
              {
                indexed: false,
                internalType: "address",
                name: "to",
                type: "address",
              },
            ],
            name: "AssetTransferred",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: false,
                internalType: "string",
                name: "serialNumber",
                type: "string",
              },
            ],
            name: "AssetUpdated",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: false,
                internalType: "string",
                name: "serialNumber",
                type: "string",
              },
              {
                indexed: false,
                internalType: "string",
                name: "maintenanceInfo",
                type: "string",
              },
            ],
            name: "MaintenancePerformed",
            type: "event",
          },
          {
            inputs: [
              {
                internalType: "string",
                name: "_serialNumber",
                type: "string",
              },
              {
                internalType: "string",
                name: "_maintenanceInfo",
                type: "string",
              },
            ],
            name: "performMaintenance",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            inputs: [
              {
                internalType: "string",
                name: "_serialNumber",
                type: "string",
              },
              {
                internalType: "string",
                name: "_assetType",
                type: "string",
              },
              {
                internalType: "string",
                name: "_make",
                type: "string",
              },
              {
                internalType: "string",
                name: "_model",
                type: "string",
              },
              {
                internalType: "string",
                name: "_RAM",
                type: "string",
              },
              {
                internalType: "string",
                name: "_hardDriveType",
                type: "string",
              },
              {
                internalType: "string",
                name: "_hardDriveSize",
                type: "string",
              },
              {
                internalType: "string",
                name: "_location",
                type: "string",
              },
            ],
            name: "registerAsset",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            inputs: [
              {
                internalType: "string",
                name: "_serialNumber",
                type: "string",
              },
              {
                internalType: "address",
                name: "_newOwner",
                type: "address",
              },
            ],
            name: "transferAsset",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            inputs: [
              {
                internalType: "string",
                name: "_serialNumber",
                type: "string",
              },
              {
                internalType: "string",
                name: "_assetType",
                type: "string",
              },
              {
                internalType: "string",
                name: "_make",
                type: "string",
              },
              {
                internalType: "string",
                name: "_model",
                type: "string",
              },
              {
                internalType: "string",
                name: "_RAM",
                type: "string",
              },
              {
                internalType: "string",
                name: "_hardDriveType",
                type: "string",
              },
              {
                internalType: "string",
                name: "_hardDriveSize",
                type: "string",
              },
              {
                internalType: "string",
                name: "_location",
                type: "string",
              },
            ],
            name: "updateAsset",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            inputs: [
              {
                internalType: "string",
                name: "_serialNumber",
                type: "string",
              },
            ],
            name: "getAssetDetails",
            outputs: [
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "address",
                name: "",
                type: "address",
              },
            ],
            stateMutability: "view",
            type: "function",
          },
          {
            inputs: [
              {
                internalType: "string",
                name: "_serialNumber",
                type: "string",
              },
            ],
            name: "getMaintenance",
            outputs: [
              {
                internalType: "string",
                name: "",
                type: "string",
              },
            ],
            stateMutability: "view",
            type: "function",
          },
        ];

        const Address = "0x9727b6b3268e92ebbcab3a162429b0efb0276a82"; //conrtact address
        window.web3 = await new Web3(window.ethereum);
        window.contract = await new window.web3.eth.Contract(ABI, Address);
        document.getElementById("contractArea").innerHTML =
          "Connected to Contract"; //calling the elementID and replacing
      };

      //Update Asset Function
      const updateAsset = async () => {
        document.getElementById("spinner").classList.remove("d-none");
        const serial = document.getElementById("serial").value;
        const assetType = document.getElementById("assetType").value;
        const make = document.getElementById("make").value;
        const model = document.getElementById("model").value;
        const RAM = document.getElementById("ram").value;
        const hardDriveType = document.getElementById("hardDriveType").value;
        const hardDriveSize = document.getElementById("hardDriveSize").value;
        const location = document.getElementById("location").value;
        console.log(
          serial,
          assetType,
          make,
          model,
          RAM,
          hardDriveType,
          hardDriveSize,
          location
        );
        try {
          const result = await window.contract.methods
            .updateAsset(
              serial,
              assetType,
              make,
              model,
              RAM,
              hardDriveType,
              hardDriveSize,
              location
            )
            .send({ from: account });
          document.getElementById(
            "statusArea"
          ).innerHTML = `Asset ${serial} updated`;
          document.getElementById("statusArea").classList.remove("d-none");
          document.getElementById("spinner").classList.add("d-none");
          document.getElementById("formArea").classList.add("d-none");
        } catch (err) {
          document.getElementById("statusArea").innerHTML = `Asset not updated`;
          document.getElementById("statusArea").classList.remove("d-none");
          document.getElementById("spinner").classList.add("d-none");
        }
      };

      //Get asset details and populate form
      const populateAssetDetails = async () => {
        const serial = document.getElementById("serialGet").value;
        console.log(serial);
        try {
          const result = await window.contract.methods
            .getAssetDetails(serial)
            .call();
          console.log(result);
          document.getElementById("serial").value = serial;
          document.getElementById("serial").readOnly = true;
          document.getElementById("assetType").value = result[1];
          document.getElementById("assetType").readOnly = true;
          document.getElementById("make").value = result[2];
          document.getElementById("make").readOnly = true;
          document.getElementById("model").value = result[3];
          document.getElementById("model").readOnly = true;
          document.getElementById("ram").value = result[4];
          document.getElementById("hardDriveType").value = result[5];
          document.getElementById("hardDriveSize").value = result[6];
          document.getElementById("location").value = result[7];
          document.getElementById("formArea").classList.remove("d-none");
          document
            .getElementById("assetDoesNotExistArea")
            .classList.add("d-none");
        } catch (err) {
          console.log(err);
          document.getElementById("formArea").classList.add("d-none");
          document
            .getElementById("assetDoesNotExistArea")
            .classList.remove("d-none");
        }
      };
    </script>
  </body>
</html>
