<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Web3 IT Asset Management Register Asset</title>
    <script
      type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"
    ></script>
  </head>

  <body style="background-color: burlywood">
    <!-- include header partials -->
    <%- include('partials/header') %>

    <h1>Welcome to the Web3 IT Asset Management Register Page</h1>

    <!-- Register Asset -->
    <div class="container">
      <h2>Register Asset</h2>
      <form>
        <!-- serial number-->
        <div class="form-group">
          <label for="serial">Asset Serial Number</label>
          <input
            type="text"
            class="form-control"
            id="serial"
            name="serial"
            placeholder="Enter Asset Serial Number"
            required
          />
        </div>
  
        <!-- asset type -->
        <div class="form-group">
          <label for="assetType">Asset Type</label>
          <input
            type="text"
            class="form-control"
            id="assetType"
            name="assetType"
            placeholder="Select Asset Type"
            required
          />
        </div>
  
        <!-- make -->
        <div class="form-group">
          <label for="make">Asset Make</label>
          <input
            type="text"
            class="form-control"
            id="make"
            name="make"
            placeholder="Enter Asset Make"
            required
          />
        </div>
  
        <!-- model-->
        <div class="form-group">
          <label for="model">Asset Model</label>
          <input
            type="text"
            class="form-control"
            id="model"
            name="model"
            placeholder="Enter Asset Model"
            required
          />
        </div>
  
        <!-- RAM-->
        <div class="form-group">
          <label for="ram">Asset RAM</label>
          <input
            type="text"
            class="form-control"
            id="ram"
            name="ram"
            placeholder="Enter Asset RAM"
            required
          />
        </div>
  
        <!-- hard drive type -->
        <div class="form-group">
          <label for="hardDriveType">Asset Hard Drive Type</label>
          <input
            type="text"
            class="form-control"
            id="hardDriveType"
            name="hardDriveType"
            placeholder="Select Asset Hard Drive Type"
            required
          />
        </div>
  
        <!-- hard drive size -->
        <div class="form-group">
          <label for="hardDriveSize">Asset Hard Drive Size</label>
          <input
            type="text"
            class="form-control"
            id="hardDriveSize"
            name="hardDriveSize"
            placeholder="Enter Asset Hard Drive Size"
            required
          />
        </div>
  
        <!-- location -->
        <div class="form-group">
          <label for="location">Asset Location</label>
          <input
            type="text"
            class="form-control"
            id="location"
            name="location"
            placeholder="Enter Asset Location"
            required
          />
        </div>
  
        <button onclick="registerAsset()" type="submit" class="btn btn-primary">
          Register Asset
        </button>
      </form>
    </div>

    <p class="container" id="statusArea">Status: status will display here</p>

    <!-- include header partials -->
    <%- include('partials/footer') %>

    <script>
      // the below script code is convention in web3 in forming the communication with Web
      let account;
      const connectMetamask = async () => {
        if (window.ethereum !== "undefined") {
          const accounts = await ethereum.request({
            method: "eth_requestAccounts",
          });
          account = accounts[0];
          document.getElementById(
            "userArea"
          ).innerHTML = `User Account: ${account}`;
        }

        //contract ABI
        const ABI = [
          {
            anonymous: false,
            inputs: [
              {
                indexed: true,
                internalType: "address",
                name: "registrant",
                type: "address",
              },
              {
                indexed: false,
                internalType: "string",
                name: "serialNumber",
                type: "string",
              },
            ],
            name: "AssetRegistered",
            type: "event",
          },
          {
            anonymous: false,
            inputs: [
              {
                indexed: false,
                internalType: "string",
                name: "serialNumber",
                type: "string",
              },
            ],
            name: "AssetUpdated",
            type: "event",
          },
          {
            inputs: [
              {
                internalType: "string",
                name: "_serialNumber",
                type: "string",
              },
            ],
            name: "getAssetBySerialNumber",
            outputs: [
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "string",
                name: "",
                type: "string",
              },
              {
                internalType: "address",
                name: "",
                type: "address",
              },
            ],
            stateMutability: "view",
            type: "function",
          },
          {
            inputs: [
              {
                internalType: "string",
                name: "_serialNumber",
                type: "string",
              },
              {
                internalType: "string",
                name: "_assetType",
                type: "string",
              },
              {
                internalType: "string",
                name: "_make",
                type: "string",
              },
              {
                internalType: "string",
                name: "_model",
                type: "string",
              },
              {
                internalType: "string",
                name: "_RAM",
                type: "string",
              },
              {
                internalType: "string",
                name: "_hardDriveType",
                type: "string",
              },
              {
                internalType: "string",
                name: "_hardDriveSize",
                type: "string",
              },
              {
                internalType: "string",
                name: "_location",
                type: "string",
              },
            ],
            name: "registerAsset",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
          {
            inputs: [
              {
                internalType: "string",
                name: "_serialNumber",
                type: "string",
              },
              {
                internalType: "string",
                name: "_assetType",
                type: "string",
              },
              {
                internalType: "string",
                name: "_make",
                type: "string",
              },
              {
                internalType: "string",
                name: "_model",
                type: "string",
              },
              {
                internalType: "string",
                name: "_RAM",
                type: "string",
              },
              {
                internalType: "string",
                name: "_hardDriveType",
                type: "string",
              },
              {
                internalType: "string",
                name: "_hardDriveSize",
                type: "string",
              },
              {
                internalType: "string",
                name: "_location",
                type: "string",
              },
            ],
            name: "updateAsset",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
          },
        ];

        const Address = "0xf35629444a6901100dfd7e2d7488a8610b78ad20"; //conrtact address
        window.web3 = await new Web3(window.ethereum);
        window.contract = await new window.web3.eth.Contract(ABI, Address);
        document.getElementById("contractArea").innerHTML =
          "Connected to Contract"; //calling the elementID and replacing
      };

      //Register Asset Function
      const registerAsset = async () => {
        const serial = document.getElementById("serial").value;
        console.log(serial);
        const assetType = document.getElementById("assetType").value;
        const make = document.getElementById("make").value;
        const model = document.getElementById("model").value;
        const RAM = document.getElementById("ram").value;
        const hardDriveType = document.getElementById("hardDriveType").value;
        const hardDriveSize = document.getElementById("hardDriveSize").value;
        const location = document.getElementById("location").value;
        console.log(
          serial,
          assetType,
          make,
          model,
          RAM,
          hardDriveType,
          hardDriveSize,
          location
        );
        try {
          const result = await window.contract.methods
            .registerAsset(
              serial,
              assetType,
              make,
              model,
              RAM,
              hardDriveType,
              hardDriveSize,
              location
            )
            .send({ from: account });
          document.getElementById(
            "statusArea"
          ).innerHTML = `Status: Asset ${serial} registered`;
        } catch (err) {
          document.getElementById(
            "statusArea"
          ).innerHTML = `Asset not registered`;
        }
      };
    </script>
  </body>
</html>
