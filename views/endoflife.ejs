<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Web3 IT Asset Management End of Life Procedure</title>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
</head>
<body>
  <!-- include header partials -->
  <%- include('partials/header') %>

  <h1>Welcome to the Web3 IT Asset Management End of Life Procedure Page</h1>

    <!-- mint NFT of secure wipe -->
    <div id="secureWipeArea">
      <input type="text" id="nftTo" placeholder="nft to"> <br>
      <input type="number" id="nftId" placeholder="token id"> <br>
      <input type="text" id="nftUri" placeholder="IPFS location"> <br>
      <button onclick="mint()">Create Secure Wipe NFT</button> <br>
    </div>


  <!-- include header partials -->
  <%- include('partials/footer') %>

  <script> // the below script code is convention in web3 in forming the communication with Web

    let account;
    const connectMetamask = async () => {
        if(window.ethereum !== "undefined") {
            const accounts = await ethereum.request({method: "eth_requestAccounts"});
            account = accounts[0];
            document.getElementById("userArea").innerHTML = `User Account: ${account}`;
        }
        //contract ABI
        const ABI =[
{
"inputs": [],
"stateMutability": "nonpayable",
"type": "constructor"
},
{
"anonymous": false,
"inputs": [
  {
    "indexed": true,
    "internalType": "address",
    "name": "_owner",
    "type": "address"
  },
  {
    "indexed": true,
    "internalType": "address",
    "name": "_approved",
    "type": "address"
  },
  {
    "indexed": true,
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  }
],
"name": "Approval",
"type": "event"
},
{
"anonymous": false,
"inputs": [
  {
    "indexed": true,
    "internalType": "address",
    "name": "_owner",
    "type": "address"
  },
  {
    "indexed": true,
    "internalType": "address",
    "name": "_operator",
    "type": "address"
  },
  {
    "indexed": false,
    "internalType": "bool",
    "name": "_approved",
    "type": "bool"
  }
],
"name": "ApprovalForAll",
"type": "event"
},
{
"anonymous": false,
"inputs": [
  {
    "indexed": true,
    "internalType": "address",
    "name": "previousOwner",
    "type": "address"
  },
  {
    "indexed": true,
    "internalType": "address",
    "name": "newOwner",
    "type": "address"
  }
],
"name": "OwnershipTransferred",
"type": "event"
},
{
"anonymous": false,
"inputs": [
  {
    "indexed": true,
    "internalType": "address",
    "name": "_from",
    "type": "address"
  },
  {
    "indexed": true,
    "internalType": "address",
    "name": "_to",
    "type": "address"
  },
  {
    "indexed": true,
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  }
],
"name": "Transfer",
"type": "event"
},
{
"inputs": [],
"name": "CANNOT_TRANSFER_TO_ZERO_ADDRESS",
"outputs": [
  {
    "internalType": "string",
    "name": "",
    "type": "string"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [],
"name": "NOT_CURRENT_OWNER",
"outputs": [
  {
    "internalType": "string",
    "name": "",
    "type": "string"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "address",
    "name": "_approved",
    "type": "address"
  },
  {
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  }
],
"name": "approve",
"outputs": [],
"stateMutability": "nonpayable",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "address",
    "name": "_owner",
    "type": "address"
  }
],
"name": "balanceOf",
"outputs": [
  {
    "internalType": "uint256",
    "name": "",
    "type": "uint256"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  }
],
"name": "getApproved",
"outputs": [
  {
    "internalType": "address",
    "name": "",
    "type": "address"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "address",
    "name": "_owner",
    "type": "address"
  },
  {
    "internalType": "address",
    "name": "_operator",
    "type": "address"
  }
],
"name": "isApprovedForAll",
"outputs": [
  {
    "internalType": "bool",
    "name": "",
    "type": "bool"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "address",
    "name": "_to",
    "type": "address"
  },
  {
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  },
  {
    "internalType": "string",
    "name": "_uri",
    "type": "string"
  }
],
"name": "mint",
"outputs": [],
"stateMutability": "nonpayable",
"type": "function"
},
{
"inputs": [],
"name": "name",
"outputs": [
  {
    "internalType": "string",
    "name": "_name",
    "type": "string"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [],
"name": "owner",
"outputs": [
  {
    "internalType": "address",
    "name": "",
    "type": "address"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  }
],
"name": "ownerOf",
"outputs": [
  {
    "internalType": "address",
    "name": "_owner",
    "type": "address"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "address",
    "name": "_from",
    "type": "address"
  },
  {
    "internalType": "address",
    "name": "_to",
    "type": "address"
  },
  {
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  }
],
"name": "safeTransferFrom",
"outputs": [],
"stateMutability": "nonpayable",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "address",
    "name": "_from",
    "type": "address"
  },
  {
    "internalType": "address",
    "name": "_to",
    "type": "address"
  },
  {
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  },
  {
    "internalType": "bytes",
    "name": "_data",
    "type": "bytes"
  }
],
"name": "safeTransferFrom",
"outputs": [],
"stateMutability": "nonpayable",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "address",
    "name": "_operator",
    "type": "address"
  },
  {
    "internalType": "bool",
    "name": "_approved",
    "type": "bool"
  }
],
"name": "setApprovalForAll",
"outputs": [],
"stateMutability": "nonpayable",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "bytes4",
    "name": "_interfaceID",
    "type": "bytes4"
  }
],
"name": "supportsInterface",
"outputs": [
  {
    "internalType": "bool",
    "name": "",
    "type": "bool"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [],
"name": "symbol",
"outputs": [
  {
    "internalType": "string",
    "name": "_symbol",
    "type": "string"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  }
],
"name": "tokenURI",
"outputs": [
  {
    "internalType": "string",
    "name": "",
    "type": "string"
  }
],
"stateMutability": "view",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "address",
    "name": "_from",
    "type": "address"
  },
  {
    "internalType": "address",
    "name": "_to",
    "type": "address"
  },
  {
    "internalType": "uint256",
    "name": "_tokenId",
    "type": "uint256"
  }
],
"name": "transferFrom",
"outputs": [],
"stateMutability": "nonpayable",
"type": "function"
},
{
"inputs": [
  {
    "internalType": "address",
    "name": "_newOwner",
    "type": "address"
  }
],
"name": "transferOwnership",
"outputs": [],
"stateMutability": "nonpayable",
"type": "function"
}
]
      
        ;
        const Address = "0xeab4ebe281eb1f661321c4858e38cb67e683e387"; //contract address
        window.web3 = await new Web3(window.ethereum);
        window.contract = await new window.web3.eth.Contract(ABI, Address);
        document.getElementById("contractArea").innerHTML = "Connected to Contract"; //calling the elementID and replacing
    }

    //mint function
    const mint = async () => {
        const to = document.getElementById("nftTo").value;
        const tokenId = document.getElementById("nftId").value;
        const uri = document.getElementById("nftUri").value;
        await window.contract.methods.mint(to, tokenId, uri).send({from: account}); 
    }

    //get owner function
    const getOwner = async () => {
        const tokenId = document.getElementById("nftOwnerId").value;
        const data = await window.contract.methods.ownerOf(tokenId).call();
        document.getElementById("ownerArea").innerHTML = `Owner: ${data}`;
    }

</script>
</body>
</html>